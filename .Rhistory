wijn <- read.csv("wijn.csv", header=TRUE, sep = ",")
wijn <- read.csv("wine.csv", header=TRUE, sep = ",")
wijn <- read.csv("wijn.csv", header=TRUE, sep = ",")
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(../lukas-vinoelst.be)
setwd("../lukas-vinoelst.be")
getwd()
setwd("../lukas-vinoelst.be")
setwd("C:/Users/loikas/Desktop/SMDAPracticum/lukas-vinoelst.be")
wijn <- read.csv("wijn.csv", header=TRUE, sep = ",")
View(wijn)
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
View(wijn)
#Data Inladen
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
#Data schalen
wijnScaled = scale(wijn[,2:13])
#PCA maken
wijn.pca = prcomp(wijnScaled,scale=TRUE)
#geschaalde PCA maken
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE)
install.packages("ade4")
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
#Data schalen
wijnScaled = scale(wijn[,2:13])
##-------------------------------------------------------------------------
#ongeschaalde PCA maken
wijn.pca = pprcomp(wijn[,2:13])
plot(wijn.pca)
unscaledRot = wijn.pca$rotation
#geschaalde PCA maken [wss best]
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE)
plot(wijnScaled.pca)
scaledRot = wijnScaled.pca$rotation
scaledPred = predict(wijnScaled.pca)
#ongeschaalde PCA maken
wijn.pca = prcomp(wijn[,2:13])
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
#Data schalen
wijnScaled = scale(wijn[,2:13])
##-------------------------------------------------------------------------
#ongeschaalde PCA maken
wijn.pca = prcomp(wijn[,2:13])
plot(wijn.pca)
unscaledRot = wijn.pca$rotation
#geschaalde PCA maken [wss best]
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE)
plot(wijnScaled.pca)
scaledRot = wijnScaled.pca$rotation
scaledPred = predict(wijnScaled.pca)
summary(wijnScaled.pca)
wijn.pca = prcomp(wijn[,2:13])
plot(wijn.pca)
summary(wijn.pca)
unscaledRot = wijn.pca$rotation
View(scaledPred)
View(scaledRot)
View(unscaledRot)
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
#Data schalen
wijnScaled = scale(wijn[,2:14])
#ongeschaalde PCA maken
wijn.pca = prcomp(wijn[,2:14])
plot(wijn.pca)
summary(wijn.pca)
unscaledRot = wijn.pca$rotation
#geschaalde PCA maken [wss best]
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE)
plot(wijnScaled.pca)
summary(wijnScaled.pca)
scaledRot = wijnScaled.pca$rotation
scaledPred = predict(wijnScaled.pca)
View(scaledRot)
View(unscaledRot)
View(wijn)
View(scaledRot)
## PCA
library(MASS)
attach(crabs); help(crabs)
summary(crabs); head(crabs)
# Afmetingen: http://www.cma4ch.org/chemo/image/crab-carapace.png
## Manuele berekeningen
X = scale(crabs[,4:8])
crabs.eig = eigen(cor(X))
crabs.eig$values/sum(crabs.eig$values)
cumsum(crabs.eig$values/sum(crabs.eig$values))
plot(1:5,crabs.eig$values,main="Scree plot",xlab="Index",ylab="Variantie")
P = crabs.eig$vectors; P # Y = XP
Y1 = X%*%P; head(Y1)
## Eerste principaalcomponent correleert in dezelfde mate met alle veranderlijken:  dit is de "grootte" van de krab: kleinere PC1 (wegens mintekens) betekent grotere krab
## Tweede component kijkt naar het verschil tussen het achterlijf RW en de andere veranderlijken: hogere PC2 betekent breder achterlijf *in vergelijking met de rest van het lichaam*
## Derde component vergelijkt de grootte van het karkas met de dikte en de voorkant van het lijf (RW speelt geen rol van betekenis): hoe groter PC3, hoe dikker het lijf/breder de voorkant van de krab
## Ingebouwde commando's
crabs.pca = prcomp(X,scale=TRUE)
plot(crabs.pca)
summary(crabs.pca)
attributes(crabs.pca)
P = crabs.pca$rotation; P
Y = predict(crabs.pca); head(Y)
max(abs(Y)-abs(Y1))
colSums(P^2)
tapply(Y[,2],sex,mean)
tapply(Y[,3],sp,mean)
##-------------------------------------------------------------------------
#!change working directory!
#Data Inladen
wijn <- read.csv("wijn.csv", header=FALSE, sep = ",")
summary(wijn)
#Data schalen
wijnScaled = scale(wijn[,2:14])
##-------------------------------------------------------------------------
#geschaalde PCA maken [waarschijnlijk best aangezien geen eenheden gegeven worden]
wijnScaled.pca = prcomp(wijnScaled,scale=TRUE)
plot(wijnScaled.pca)
summary(wijnScaled.pca)
scaledRot = wijnScaled.pca$rotation
scaledPred = predict(wijnScaled.pca)
View(wijn)
View(scaledRot)
View(scaledRot)
train = sample(wijnScaled,50)
validate = sample(wijnScaled-train,50)
test = -train-validate
train = sample(wijnScaled,50)
install.packages("car")
train = sample(178,50)
validate = sample(-train,50)
test = -train-validate
#Opdelen in train, validatie en test data
train = sample(178,50);
validate = sample(-train,50);
test = -train-validate;
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
##-------------------------------------------------------------------------
#Classificatie
#Opdelen in train, validatie en test data
indices = 1:178;
indices = 1:178;
train = sample(178,50);
validate_test = indices[-train];
validate = sample(validate_test,50);
test = validate_test[-validate];
indices = 1:178;
test = sample(178,50);
validate_train = indices[-train];
validate = sample(validate_test,50);
train = validate_test[-validate];
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
indices = 1:178;
test = sample(178,50);
validate_train = indices[-train];
validate = sample(validate_train,50);
train = validate_train[-validate];
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
#Classificatie
#Opdelen in train, validatie en test data
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-validate];
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
train = validate_train[-validate];
#Opdelen in train, validatie en test data
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
indices = 1:178;
test = sample(178,50);
validate_train = indices[-test];
validate = sample(validate_train,50);
train = validate_train[-which(validate_train %in% validate)];
wijn.train = wijn[train,]
wijn.validate = wijn[validate,]
wijn.test = wijn[test,]
wijnScaled = scale(wijn[,2:14]);
wijnScaledSp = wijn;wijnScaledSp[,2:14] = wijnScaled;
View(wijnScaledSp)
View(wijnScaled)
wijnScaledSp$V1
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train)
predict(wijn.lda, wijnScaledSp[validate,])
## Voorwaarden: Multivariate normaliteit werd bestudeerd in sectie 3.
## M/V bevat telkens nog O/B dus nog twee groepen: lichte afwijking van normaliteit
## dit hoeft de classificatie niet te schaden (AER beslist hoe goed die is)
## maar kansuitspraken zijn fishy, want die zijn gebaseerd op de dichtheidsfunctie
lda.sex = lda(X,y); lda.sex
library(MASS)
wijn.lda <- lda(V1 ~.,wijnScaledSp ,subset = train)
predict(wijn.lda, wijnScaledSp[validate,])
predict(wijn.lda, wijnScaledSp[validate,])$class
wijn.qda <- qda(V1 ~.,wijnScaledSp ,subset = train);
qda.pred <- predict(wijn.qda, wijnScaledSp[validate,])
max_k = 178;
ER.validate = c(1:max_k)
ER.validate = indices
ER.validate[2] = 5
ER.validate = indices
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:maX_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:maX_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
klijst = 1:maX_k
resultaten = cbind(ER.validate=NULL)
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
aer = function(y1,y2,conf=TRUE) {
confusion = table(y1,y2)
if (conf) {print(confusion)}
observaties = sum(confusion)
verkeerd = observaties-sum(diag(confusion))
verkeerd/observaties
}
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(v1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
View(wijnScaled.pca)
View(wijnScaledSp)
wijnScaledSp$V1
soort = V1;
attach(wijn)
v1
V1
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1, k),FALSE)
))
}
library(MASS)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1, k),FALSE)
))
}
library(class)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1, k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
V1
V1[train,]
V1[train]
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1,knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1[train],knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 178;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1[validate],knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
wwarning()
warnings()
cls
cl
clc
max_k = 78;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1[validate],knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,178),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:178,resultaten,type='l',add=TRUE)
max_k = 78;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1[validate],knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,78),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n"); abline(h=.5)
matplot(1:78,resultaten,type='l',add=TRUE)
max_k = 78;
resultaten = cbind(ER.validate=NULL)
klijst = 1:max_k
for (k in klijst) {
resultaten = rbind(resultaten,cbind(
ER.validate=aer(V1[validate],knn(wijnScaledSp[train,], wijnScaledSp[validate,], V1[train], k),FALSE)
))
}
head(resultaten)
plot(c(0,78),c(0,1),xlab="Number of neigbours",ylab="Error rate",type="n");
matplot(1:78,resultaten,type='l',add=TRUE)
